
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'assignmentleft+-left*/rightUMINUSCHAR NUMBERexpression : "-" expression %prec UMINUSassignment : CHAR "=" expressionexpression : expression "+" expression\n                      | expression "-" expression\n                      | expression "*" expression\n                      | expression "/" expression\n                      | "(" expression ")"\n                      | NUMBER'
    
_lr_action_items = {'CHAR':([0,],[2,]),'$end':([1,4,7,12,14,15,16,17,18,],[0,-2,-8,-1,-3,-4,-5,-6,-7,]),'=':([2,],[3,]),'-':([3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,],[5,9,5,5,-8,5,5,5,5,-1,9,-3,-4,-5,-6,-7,]),'(':([3,5,6,8,9,10,11,],[6,6,6,6,6,6,6,]),'NUMBER':([3,5,6,8,9,10,11,],[7,7,7,7,7,7,7,]),'+':([4,7,12,13,14,15,16,17,18,],[8,-8,-1,8,-3,-4,-5,-6,-7,]),'*':([4,7,12,13,14,15,16,17,18,],[10,-8,-1,10,10,10,-5,-6,-7,]),'/':([4,7,12,13,14,15,16,17,18,],[11,-8,-1,11,11,11,-5,-6,-7,]),')':([7,12,13,14,15,16,17,18,],[-8,-1,18,-3,-4,-5,-6,-7,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'assignment':([0,],[1,]),'expression':([3,5,6,8,9,10,11,],[4,12,13,14,15,16,17,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> assignment","S'",1,None,None,None),
  ('expression -> - expression','expression',2,'p_expression_uminus','test.py',42),
  ('assignment -> CHAR = expression','assignment',3,'p_assignment','test.py',46),
  ('expression -> expression + expression','expression',3,'p_expression','test.py',50),
  ('expression -> expression - expression','expression',3,'p_expression','test.py',51),
  ('expression -> expression * expression','expression',3,'p_expression','test.py',52),
  ('expression -> expression / expression','expression',3,'p_expression','test.py',53),
  ('expression -> ( expression )','expression',3,'p_expression','test.py',54),
  ('expression -> NUMBER','expression',1,'p_expression','test.py',55),
]
